#!/usr/bin/env node

/*!
 * hyve
 * Copyright (C) 2020-present  imtbl  https://github.com/imtbl
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

const path = require('path')
const cluster = require('cluster')

require('dotenv').config({ path: path.resolve(__dirname, '../.env') })

const lock = require('../src/util/lock')

if (lock.exists()) {
  console.info(
    'Another sync seems to be running already, aborting. If you are certain ' +
    `that this is not the case, delete ${lock.path} and try again.`
  )

  process.exit(0)
}

const sync = require('../src/sync')

const abort = () => {
  if (!cluster.isMaster) {
    return
  }

  let exitCode = 0

  const promises = []
  const workerIds = Object.keys(cluster.workers)

  for (const workerId of workerIds) {
    const worker = cluster.workers[workerId]

    promises.push(new Promise(resolve => {
      let resolved = false

      worker.once('exit', () => {
        if (resolved) {
          return
        }

        resolved = true

        resolve()
      })

      setTimeout(() => {
        if (resolved) {
          return
        }

        resolved = true

        console.error('Could not close worker in time, killing it.')

        process.kill(worker.process.pid, 'SIGKILL')

        exitCode = 1

        resolve()
      }, 4000)
    }))

    worker.send('abort')
    worker.disconnect()
  }

  Promise.all(promises).then(() => {
    lock.remove()

    process.exit(exitCode)
  })
}

process.on('SIGTERM', abort)
process.on('SIGINT', abort)

if (cluster.isMaster) {
  cluster.fork()

  cluster.on('exit', (worker, code) => {
    process.exit(code)
  })
} else {
  process.on('message', message => {
    if (message === 'abort') {
      sync.abort()
    }
  })

  try {
    lock.create()

    sync.run()

    lock.remove()

    process.exit(0)
  } catch (err) {
    console.error('Error while trying to sync.\n', err)

    lock.remove()

    process.exit(1)
  }
}
